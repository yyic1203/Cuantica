import numpy as np
from numpy.linalg import eig

np.set_printoptions(precision=3)

# Definir dos matrices 3x3 con entradas complejas como ejemplo
H = np.array([[1, np.sqrt(2), 1],
              [np.sqrt(2), 2, 1j+np.sqrt(2)],
              [1, -1j+np.sqrt(2), 3]])

L = np.array([[np.pi, 0, np.sqrt(2)-1j],
              [0, np.pi/2, np.sqrt(3)],
              [np.sqrt(2)+1j, np.sqrt(3), 2*np.pi]])

#Conmutador
chl=np.dot(H,L)-np.dot(L,H)
# Calcular los autovalores y autovectores para la matriz H
autovalores_H, autovectores_H = eig(H)
autovalores_L, autovectores_L = eig(L)

print("Autovalores de H:", autovalores_H)
print("Autovectores de H:", autovectores_H)

nH1=np.linalg.norm(autovectores_H[:,0])
nH2=np.linalg.norm(autovectores_H[:,1])
nH3=np.linalg.norm(autovectores_H[:,2])

print("Norma del autovector 1 de H", nH1)
print("Norma del autovector 2 de H", nH2)
print("Norma del autovector 3 de H", nH3)

Da_auv_H1= autovectores_H[:,0].conj().T
Da_auv_H2= autovectores_H[:,1].conj().T
Da_auv_H3= autovectores_H[:,2].conj().T

print("El hermitico conjugado del vector 1 de H", Da_auv_H1)
print("El hermitico conjugado del vector 2 de H", Da_auv_H2)
print("El hermitico conjugado del vector 3 de H", Da_auv_H3)

p1H=np.outer(autovectores_H[:,0],Da_auv_H1)
p2H=np.outer(autovectores_H[:,1],Da_auv_H2)
p3H=np.outer(autovectores_H[:,2],Da_auv_H3)

print("El vector de proyeccion 1 de H", p1H)
print("El vector de proyeccion 2 de H", p2H)
print("El vector de proyeccion 3 de H", p3H)

# Calcular los autovalores y autovectores para la matriz L

print("Autovalores de L:", autovalores_L)
print("Autovectores de L:", autovectores_L)

nL1=np.linalg.norm(autovectores_L[:,0])
nL2=np.linalg.norm(autovectores_L[:,1])
nL3=np.linalg.norm(autovectores_L[:,2])

print("Norma del autovector 1 de L", nL1)
print("Norma del autovector 2 de L", nL2)
print("Norma del autovector 3 de L", nL3)

Da_auv_L1= autovectores_L[:,0].conj().T
Da_auv_L2= autovectores_L[:,1].conj().T
Da_auv_L3= autovectores_L[:,2].conj().T

print("El hermitico conjugado del vector 1 de L", Da_auv_L1)
print("El hermitico conjugado del vector 2 de L", Da_auv_L2)
print("El hermitico conjugado del vector 3 de L", Da_auv_L3)

p1L=np.outer(autovectores_L[:,0],Da_auv_L1)
p2L=np.outer(autovectores_L[:,1],Da_auv_L2)
p3L=np.outer(autovectores_L[:,2],Da_auv_L3)

print("El vector de proyeccion 1 de L", p1L)
print("El vector de proyeccion 2 de L", p2L)
print("El vector de proyeccion 3 de L", p3L)
 
#ortogonalidad de las base H.
e12h= np.vdot(autovectores_H[:,0],autovectores_H[:,1])
e13h= np.vdot(autovectores_H[:,0],autovectores_H[:,2])
e23h= np.vdot(autovectores_H[:,1],autovectores_H[:,2])

print("El producto interno entre el vector 1 y 2 de H es:", e12h)
print("El producto interno entre el vector 1 y 3 de H es:", e13h)
print("El producto interno entre el vector 2 y 3 de H es:", e23h)

#ortogonalidad de las base L.
e12l= np.vdot(autovectores_L[:,0],autovectores_L[:,1])
e13l= np.vdot(autovectores_L[:,0],autovectores_L[:,2])
e23l= np.vdot(autovectores_L[:,1],autovectores_L[:,2])

print("El producto interno entre el vector 1 y 2 de L es:", e12l)
print("El producto interno entre el vector 1 y 3 de L es:", e13l)
print("El producto interno entre el vector 2 y 3 de L es:", e23l)

#Relación de completez de H

ch= p1H+p2H+p3H
print("Relacion de completez: ", ch)

#Relación de completez de L

cl= p1L+p2L+p3L
print("Relacion de completez: ", cl)

#Matriz de transformación

U= np.dot(autovectores_L, np.linalg.inv(autovectores_H))
print("Matriz de transformacion: ", U)

#Inversa de la matriz de transformacion

Ui=np.linalg.inv(U)
print("Matriz de transformacion inversa: ", Ui)

#H bajo transformación de U
hp=np.dot(np.dot(U,H),Ui)
print("Matriz H en la base l", hp)

#Traza y determinante de H
th=np.trace(H)
dh=np.linalg.det(H)
print("la traza de la matriz H",th)
print("el determinante de la matriz H",dh)
#Traza y determinante de L
tl=np.trace(L)
dl=np.linalg.det(L)
print("la traza de la matriz L",tl)
print("el determinante de la matriz L",dl)

#Estados H
phih=5*autovectores_H[:,0]-2*autovectores_H[:,1]+7*autovectores_H[:,2]
print("Estado phih",phih)
phil=-7*autovectores_L[:,0]-1*autovectores_L[:,1]+3*autovectores_L[:,2]
print("Estado phil",phil)

#Incertidumbre

# Calcular H^2 y L^2
H2 = np.dot(H, H)
L2 = np.dot(L, L)

# Función para calcular la incertidumbre de un operador en un estado dado
def calcular_incertidumbre(operador, operador2, estado):
    valor_esperado = np.dot(estado.conj().T, np.dot(operador, estado))
    valor_esperado2 = np.dot(estado.conj().T, np.dot(operador2, estado))
    incertidumbre = np.sqrt(np.abs(valor_esperado2 - valor_esperado**2))
    return incertidumbre  # Asegurarse de tomar solo la parte real

# Calcular las incertidumbres para el estado |phi_h>
in_hh = calcular_incertidumbre(H, H2, phih)
in_hl = calcular_incertidumbre(L, L2, phih)

# Calcular las incertidumbres para el estado |phi_l>
in_lh = calcular_incertidumbre(H, H2, phil)
in_ll = calcular_incertidumbre(L, L2, phil)

# Calcular el producto de incertidumbres para cada estado
pih = in_hh * in_hl
pil = in_lh * in_ll

print("La incertidumbre asociada al primer estado respecto a H: ", in_hh)
print("La incertidumbre asociada al primer estado respecto a L: ", in_hl)
print("La incertidumbre asociada al segundo estado respecto a H: ", in_lh)
print("La incertidumbre asociada al segundo estado respecto a L: ", in_ll)
print("La incertidumbre asociada al primer estado es: ", pih)
print("La incertidumbre asociada al segundo estado es: ", pil)
